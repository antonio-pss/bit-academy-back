# Generated by Django 5.1.7 on 2025-04-30 17:30

import django.contrib.auth.models
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(db_column='id_model', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, db_column='created_at')),
                ('modified', models.DateTimeField(auto_now=True, db_column='modified_at')),
                ('active', models.BooleanField(db_column='active', default=True)),
                ('image_url', models.URLField(blank=True, db_column='image')),
            ],
            options={
                'db_table': 'image',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(db_column='id_model', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(auto_now_add=True, db_column='created_at')),
                ('modified', models.DateTimeField(auto_now=True, db_column='modified_at')),
                ('active', models.BooleanField(db_column='active', default=True)),
                ('username', models.CharField(max_length=12, unique=True, verbose_name=django.core.validators.MinLengthValidator(6))),
                ('name', models.CharField(max_length=30)),
                ('email', models.EmailField(max_length=150, unique=True)),
                ('password', models.TextField(verbose_name=django.core.validators.MinLengthValidator(8))),
                ('xp', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('streak', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('bio', models.TextField(blank=True, db_column='tx_bio', null=True)),
                ('avatar', models.URLField(blank=True, db_column='url_avatar', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
